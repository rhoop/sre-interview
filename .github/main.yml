name: Deploy k8s

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build EKS Image
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      CLUSTER_NAME: dflow-production-eks
    permissions:
          id-token: write   # This is required for requesting the JWT
          contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find last release
        id: last-release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          exclude_types: "draft|prerelease"
          view_top: 1

      - name: Set version
        id: version
        run: echo "version=$LATEST_RELEASE_TAG" >> "$GITHUB_OUTPUT"
        env:
          LATEST_RELEASE_TAG: ${{ steps.last-release.outputs.tag_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create image path
        id: image-path
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        run: echo "::set-output name=path::$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_NUMBER-k8s"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.image-path.outputs.path }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
